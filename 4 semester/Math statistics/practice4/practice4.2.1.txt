clc;
clear;
pkg load statistics;

function result = critery(alpha, sigma, d1, d2, n, gamma)
  	X = sort(normrnd(alpha, sigma, 1, n));
  	e1 = sum(X) / n;
  	e2 = sqrt(sum((X - alpha).^2) / n);
  	m = ceil(n^(1/3));
  	h = (X(n) - X(1)) / m;
  	histogram = hist(X, m);

  	e1 += d1;
  	e2 += d2;
  	chi = 0;
  	m1 = 0;
  	i = 1;
	while (i <= m)
	    	old_i = i - 1;
    		nj = histogram(i);
    		while (nj < 6 && i < m)
      			++i;
      			nj = nj + histogram(i);
    		endwhile
    		p_i = normcdf(X(1) + h * i, e1, e2) - normcdf(X(1) + h * old_i, e1, e2);
    		chi = chi + (nj - n * p_i)^2 / (n * p_i);
    		++i;
    		++m1;
  	endwhile 
	result = [chi >= chi2inv(gamma, m1 - 3), chi, chi2inv(gamma, m1 - 3)];
endfunction

function errors1(alpha, sigma, d1, d2, n, gamma, cnt)
  	gamma
  	e = 0;
  	for i = 1 : cnt
    		e += critery(alpha, sigma, d1, d2, n, gamma)(1);
  	endfor
  	probability = e/cnt
	printf("\n");
endfunction

function errors2(alpha, sigma, d1, d2, n, gamma, cnt)
  	gamma
  	d1
  	d2
  	e = 0;
  	for i = 1 : cnt
    		e += critery(alpha, sigma, d1, d2, n, gamma)(1);
  	endfor
  	e = cnt - e;
  	probability = e/cnt
	printf("\n");
endfunction

cnt = 100;
alpha = 0;
sigma = 2;
n = 10^6;

gamma = 0.9
criteryValues = critery(alpha, sigma, 0, 0, n, gamma);
chi = criteryValues(2)
limit = criteryValues(3)
result = 1 - criteryValues(1)
printf("\n");

gamma = 0.95
criteryValues = critery(alpha, sigma, 0, 0, n, gamma);
chi = criteryValues(2)
limit = criteryValues(3)
result = 1 - criteryValues(1)
printf("\n");

gamma = 0.99
criteryValues = critery(alpha, sigma, 0, 0, n, gamma);
chi = criteryValues(2)
limit = criteryValues(3)
result = 1 - criteryValues(1)
printf("\n");

printf("First type error: \n");
errors1(alpha, sigma, 0, 0, n, 0.90, cnt);
errors1(alpha, sigma, 0, 0, n, 0.95, cnt);
errors1(alpha, sigma, 0, 0, n, 0.99, cnt);
printf("Second type error: \n");
errors2(alpha, sigma, 0, 0.01, n, 0.95, cnt);
errors2(alpha, sigma, 0, 0.02, n, 0.95, cnt);
errors2(alpha, sigma, 0, 0.03, n, 0.95, cnt);